import os

configfile: "kenya_config_whole_genome.json"


## PATHS AND DIRECTORIES ##
# the fastq directory additionally has {sample_name}/Unaligned/
fastq_directory = "fastq_files/"
#hg38 = "/mnt/storage/SAYRES/REFERENCE_GENOMES/UCSC_hg38/hg38.fa"
#hg38_inx = "/mnt/storage/SAYRES/REFERENCE_GENOMES/UCSC_hg38/hg38.fa.fai"

# Path to packages, user may change if they are not using conda installed packages
gatk_path_old = "/home/amtarave/packages/GenomeAnalysisTK-3.6/GenomeAnalysisTK.jar"
gatk_path = "/home/amtarave/packages/gatk-4.0.11.0/gatk-package-4.0.11.0-local.jar"
fastqc_path = "fastqc"
multiqc_path = "multiqc"
trimmomatic_path = "trimmomatic"
bbduksh_path = "bbduk.sh"
bbmerge_sh_path = "bbmerge.sh"
picard_path = "picard"
sambamba_path = "sambamba"
samtools_path = "samtools"
bwa_path = "bwa"


V = "-V "
#this needs to be changed to reflect new symbolic file name
fastq_prefixes = [
	config[x]["fq1_sy"][:-9] for x in config["unique_identifier"]] + [
		config[x]["fq2_sy"][:-9] for x in config["unique_identifier"]]


rule all:
	input:
		expand("refs/{ref_type}.fa",
			ref_type=["Ref_GRCh38","Ref_GRCh38_Y_HardMasked","Ref_GRCh38_Y_PARsMasked"]),
		expand("refs/{ref_type}.fa.fai",
			ref_type=["Ref_GRCh38","Ref_GRCh38_Y_HardMasked","Ref_GRCh38_Y_PARsMasked"]),
		expand("refs/{ref_type}.dict",
			ref_type=["Ref_GRCh38","Ref_GRCh38_Y_HardMasked","Ref_GRCh38_Y_PARsMasked"]),
		expand("refs/{ref_type}.fa.amb",
			ref_type=["Ref_GRCh38","Ref_GRCh38_Y_HardMasked","Ref_GRCh38_Y_PARsMasked"]),
		expand(
			"fastq_files/{unique_identifier}_R1.fastq.gz",
			unique_identifier=config["unique_identifier"]),
		expand(
			"fastq_files/{unique_identifier}_R2.fastq.gz",
			unique_identifier=config["unique_identifier"]),
		"multiqc/multiqc_report.html",
		expand(
			"/scratch/amtarave/Kenya_agave/whole_genome/trimmed_fastqs/{sample}_trimmed_R1.fastq.gz",
			sample=config["unique_identifier"]),
		expand(
			"/scratch/amtarave/Kenya_agave/whole_genome/trimmed_fastqs/{sample}_trimmed_R2.fastq.gz",
			sample=config["unique_identifier"]),
		"multiqc_trimmed/multiqc_report.html",
		expand("/scratch/amtarave/Kenya_agave/whole_genome/processed_bams/{unique_identifier}.GRCh38_minusYPARs.sorted.bam",
			unique_identifier=config["unique_identifier_males"]),
		expand(
			"/scratch/amtarave/Kenya_agave/whole_genome/processed_bams/{unique_identifier}.GRCh38_minusYPARs.sorted.bam.bai",
			unique_identifier=config["unique_identifier_males"]),
		expand(
			"/scratch/amtarave/Kenya_agave/whole_genome/processed_bams/{unique_identifier}.GRCh38_Ymasked.sorted.bam",
			unique_identifier=config["unique_identifier_females"]),
		expand(
			"/scratch/amtarave/Kenya_agave/whole_genome/processed_bams/{unique_identifier}.GRCh38_Ymasked.sorted.bam.bai",
			unique_identifier=config["unique_identifier_females"]),
		expand(
			"/scratch/amtarave/Kenya_agave/whole_genome/processed_bams/{sample_males}.GRCh38_minusYPARs.sorted.merged.bam",
			sample_males=config["males"]),
		expand(
			"/scratch/amtarave/Kenya_agave/whole_genome/processed_bams/{sample_females}.GRCh38_Ymasked.sorted.merged.bam",
			sample_females=config["females"]),
		expand(
			"/scratch/amtarave/Kenya_agave/whole_genome/processed_bams/{sample_males}.GRCh38_minusYPARs.sorted.merged.bam.bai",
			sample_males=config["males"]),
		expand(
			"/scratch/amtarave/Kenya_agave/whole_genome/processed_bams/{sample_females}.GRCh38_Ymasked.sorted.merged.bam.bai",
			sample_females=config["females"]),
		expand(
			"/scratch/amtarave/Kenya_agave/whole_genome/stats/{sample}.{genome}.sorted.bam.stats".split(), zip,
			sample=config["samples_list_ordered"], genome=config["sex_specific_ref_list_ordered"]),
		expand(
			"/scratch/amtarave/Kenya_agave/whole_genome/processed_bams/{sample}.{genome}.sorted.merged.mkdup.bam".split(), zip,
			sample=config["samples_list_ordered"], genome=config["sex_specific_ref_list_ordered"]),
		expand(
			"/scratch/amtarave/Kenya_agave/whole_genome/stats/{sample}.{genome}.picard_mkdup_metrics.txt".split(), zip,
			sample=config["samples_list_ordered"], genome=config["sex_specific_ref_list_ordered"]),
		expand(
			"/scratch/amtarave/Kenya_agave/whole_genome/processed_bams/{sample}.{genome}.sorted.merged.mkdup.bam.bai".split(), zip,
			sample=config["samples_list_ordered"], genome=config["sex_specific_ref_list_ordered"]),
		expand(
			"/scratch/amtarave/Kenya_agave/whole_genome/stats/{sample}.{genome}.sorted.mkdup.bam.stats".split(), zip,
			sample=config["samples_list_ordered"], genome=config["sex_specific_ref_list_ordered"]),
		
		
		expand(
			"/scratch/amtarave/Kenya_agave/whole_genome/gvcfs/{sample}.{genome}.merged.g.vcf.gz".split(), zip,
			sample=config["samples_list_ordered_pilot"], genome=config["sex_specific_ref_list_ordered_pilot"]),
		#expand(
		#	"/scratch/amtarave/Kenya_agave/whole_genome/gvcfs/{chrm}/{chrm}.{sample_w_genome}.merged.g.vcf.gz",
		#	sample_w_genome=config["samples_list_pilot_with_ref_info"], chrm=config["chromosome"]),
		#expand(
		#	"gendb://my_database_{chrm}", chrm=config["chromosome"])
		#"gendb:///scratch/amtarave/Kenya_agave/whole_genome/genomicsDBImport/my_database",
		"/scratch/amtarave/Kenya_agave/whole_genome/vcfs/pilot_samples.WGS.raw.vcf"
		#"/scratch/amtarave/Kenya_agave/whole_genome/vcfs/pilot_samples.WGS.raw.SNPs.vcf",		
		#"/scratch/amtarave/Kenya_agave/whole_genome/vcfs/pilot_samples.WGS.raw.allsites.vcf"
		


rule prep_refs_mk_sy_ln:
	input:
		ref = lambda wildcards: config["genome_paths"][wildcards.ref_type]
	output:
		ref_sy_ln = "refs/{ref_type}.fa",
	priority:110
	shell:
		"""
		ln -s {input.ref} {output.ref_sy_ln}
		"""

rule prep_refs:
	input:
		"refs/{ref_type}.fa"
	output:
		fai = "refs/{ref_type}.fa.fai",
		dict = "refs/{ref_type}.dict",
		amb = "refs/{ref_type}.fa.amb"
	priority:105
	params:
		samtools = samtools_path,
		bwa = bwa_path
	shell:
		"""
		{params.samtools} faidx {input};
		{params.samtools} dict -o {output.dict} {input};
		{params.bwa} index {input}
		"""

rule make_symbolic_link_for_fastqs:
	input:
		original_R1 = lambda wildcards: config[wildcards.unique_identifier]["fq_paths"] + config[wildcards.unique_identifier]["stem_name"] + "_R1_001.fastq.gz",
		original_R2 = lambda wildcards: config[wildcards.unique_identifier]["fq_paths"] + config[wildcards.unique_identifier]["stem_name"] + "_R2_001.fastq.gz"
	output:
		R1_out = "fastq_files/{unique_identifier}_R1.fastq.gz",
		R2_out = "fastq_files/{unique_identifier}_R2.fastq.gz"
	shell:
		"""
		ln -s {input.original_R1} {output.R1_out} && touch -h {output.R1_out};
		ln -s {input.original_R2} {output.R2_out} && touch -h {output.R2_out};
		"""


rule fastqc_analysis:
	input:
		os.path.join(fastq_directory, "{fq_prefix}.fastq.gz")
	output:
		"fastqc/{fq_prefix}_fastqc.html"
	params:
		fastqc = fastqc_path
	shell:
		"{params.fastqc} -o fastqc/ {input}"


rule multiqc_analysis:
	input:
		expand("fastqc/{fq_prefix}_fastqc.html", fq_prefix=fastq_prefixes)
	output:
		"multiqc/multiqc_report.html"
	params:
		multiqc = multiqc_path
	shell:
		"export LC_ALL=en_US.UTF-8 && export LANG=en_US.UTF-8 && "
		"{params.multiqc} --interactive -o multiqc fastqc"


rule trim_adapters_paired_bbduk:
	input:
		fq1 = lambda wildcards: os.path.join(
			fastq_directory, config[wildcards.sample]["fq1_sy"]),
		fq2 = lambda wildcards: os.path.join(
			fastq_directory, config[wildcards.sample]["fq2_sy"])
	output:
		out_fq1 = "/scratch/amtarave/Kenya_agave/whole_genome/trimmed_fastqs/{sample}_trimmed_R1.fastq.gz",
		out_fq2 = "/scratch/amtarave/Kenya_agave/whole_genome/trimmed_fastqs/{sample}_trimmed_R2.fastq.gz"
	params:
		bbduksh = bbduksh_path
	shell:
		"{params.bbduksh} -Xmx3g in1={input.fq1} in2={input.fq2} "
		"out1={output.out_fq1} out2={output.out_fq2} "
		"ref=misc/adapter_sequence.fa ktrim=r k=21 mink=11 hdist=2 tbo tpe "
		"qtrim=rl trimq=15 minlen=75 maq=20"


rule fastqc_analysis_trimmed:
	input:
		fq1 = "/scratch/amtarave/Kenya_agave/whole_genome/trimmed_fastqs/{sample}_trimmed_R1.fastq.gz",
		fq2 = "/scratch/amtarave/Kenya_agave/whole_genome/trimmed_fastqs/{sample}_trimmed_R2.fastq.gz"
	output:
		html1 = "trimmed_fastqc/{sample}_trimmed_R1_fastqc.html",
		html2 = "trimmed_fastqc/{sample}_trimmed_R2_fastqc.html"
	params:
		fastqc = fastqc_path
	shell:
		"{params.fastqc} -o trimmed_fastqc/ {input.fq1} {input.fq2}"


rule multiqc_analysis_trimmed:
	input:
		expand(
			"trimmed_fastqc/{sample}_trimmed_{read}_fastqc.html",
			sample=config["unique_identifier"], read=["R1", "R2"])
	output:
		"multiqc_trimmed/multiqc_report.html"
	params:
		multiqc = multiqc_path
	shell:
		"export LC_ALL=en_US.UTF-8 && export LANG=en_US.UTF-8 && "
		"{params.multiqc} --interactive -o multiqc_trimmed trimmed_fastqc"


### Before this step I have to prepare the ref files by using bwa index. I should probably
#	make a refs folder in the project directory.
rule map_to_sex_specific_refs_males:
	input:
		fq1 = "/scratch/amtarave/Kenya_agave/whole_genome/trimmed_fastqs/{unique_identifier}_trimmed_R1.fastq.gz",
		fq2 = "/scratch/amtarave/Kenya_agave/whole_genome/trimmed_fastqs/{unique_identifier}_trimmed_R2.fastq.gz",
		new = config["Ref_GRCh38_Y_PARsMasked"],
		fai = expand("refs/{ref_type}.fa.fai", ref_type=["Ref_GRCh38","Ref_GRCh38_Y_HardMasked","Ref_GRCh38_Y_PARsMasked"]),
		dict = expand("refs/{ref_type}.dict", ref_type=["Ref_GRCh38","Ref_GRCh38_Y_HardMasked","Ref_GRCh38_Y_PARsMasked"]),
		amb = expand("refs/{ref_type}.fa.amb", ref_type=["Ref_GRCh38","Ref_GRCh38_Y_HardMasked","Ref_GRCh38_Y_PARsMasked"])
	output:
		"/scratch/amtarave/Kenya_agave/whole_genome/processed_bams/{unique_identifier}.GRCh38_minusYPARs.sorted.bam"
	params:
		id = lambda wildcards: config[wildcards.unique_identifier]["ID"],
		sm = lambda wildcards: config[wildcards.unique_identifier]["SM"],
		lb = lambda wildcards: config[wildcards.unique_identifier]["LB"],
		pu = lambda wildcards: config[wildcards.unique_identifier]["PU"],
		pl = lambda wildcards: config[wildcards.unique_identifier]["PL"],
		bwa = bwa_path,
		samtools = samtools_path,
		threads = 4
	threads: 4
	priority: 100
	shell:
		" {params.bwa} mem -t {params.threads} -R "
	 	"'@RG\\tID:{params.id}\\tSM:{params.sm}\\tLB:{params.lb}\\tPU:{params.pu}\\tPL:{params.pl}' "
		"{input.new} {input.fq1} {input.fq2}"
		" | {params.samtools} fixmate -O bam - - | {params.samtools} sort "
		"-O bam -o {output}"


rule map_to_sex_specific_refs_females:
	input:
		fq1 = "/scratch/amtarave/Kenya_agave/whole_genome/trimmed_fastqs/{unique_identifier}_trimmed_R1.fastq.gz",
		fq2 = "/scratch/amtarave/Kenya_agave/whole_genome/trimmed_fastqs/{unique_identifier}_trimmed_R2.fastq.gz",
		new = config["Ref_GRCh38_Y_HardMasked"],
		fai = expand("refs/{ref_type}.fa.fai", ref_type=["Ref_GRCh38","Ref_GRCh38_Y_HardMasked","Ref_GRCh38_Y_PARsMasked"]),
		dict = expand("refs/{ref_type}.dict", ref_type=["Ref_GRCh38","Ref_GRCh38_Y_HardMasked","Ref_GRCh38_Y_PARsMasked"]),
		amb = expand("refs/{ref_type}.fa.amb", ref_type=["Ref_GRCh38","Ref_GRCh38_Y_HardMasked","Ref_GRCh38_Y_PARsMasked"])
	output:
		"/scratch/amtarave/Kenya_agave/whole_genome/processed_bams/{unique_identifier}.GRCh38_Ymasked.sorted.bam"
	params:
		id = lambda wildcards: config[wildcards.unique_identifier]["ID"],
		sm = lambda wildcards: config[wildcards.unique_identifier]["SM"],
		lb = lambda wildcards: config[wildcards.unique_identifier]["LB"],
		pu = lambda wildcards: config[wildcards.unique_identifier]["PU"],
		pl = lambda wildcards: config[wildcards.unique_identifier]["PL"],
		bwa = bwa_path,
		samtools = samtools_path,
		threads = 4
	threads: 4
	priority: 95
	shell:
		" {params.bwa} mem -t {params.threads} -R "
	 	"'@RG\\tID:{params.id}\\tSM:{params.sm}\\tLB:{params.lb}\\tPU:{params.pu}\\tPL:{params.pl}' "
		"{input.new} {input.fq1} {input.fq2}"
		" | {params.samtools} fixmate -O bam - - | {params.samtools} sort "
		"-O bam -o {output}"


rule index_bam_males:
	input:
		"/scratch/amtarave/Kenya_agave/whole_genome/processed_bams/{sample}.GRCh38_minusYPARs.sorted.bam"
	output:
		"/scratch/amtarave/Kenya_agave/whole_genome/processed_bams/{sample}.GRCh38_minusYPARs.sorted.bam.bai"
	params:
		samtools = samtools_path
	priority: 90
	shell:
		"{params.samtools} index {input}"


rule index_bam_females:
	input:
		"/scratch/amtarave/Kenya_agave/whole_genome/processed_bams/{sample}.GRCh38_Ymasked.sorted.bam"
	output:
		"/scratch/amtarave/Kenya_agave/whole_genome/processed_bams/{sample}.GRCh38_Ymasked.sorted.bam.bai"
	params:
		samtools = samtools_path
	priority: 85
	shell:
		"{params.samtools} index {input}"


rule merge_bams_males:
	input:
		bams = lambda wildcards: expand(
			"/scratch/amtarave/Kenya_agave/whole_genome/processed_bams/{sample_males}.GRCh38_minusYPARs.sorted.bam",
			sample_males=config["samples_males"][wildcards.sample_males]),
		bais = lambda wildcards: expand(
			"/scratch/amtarave/Kenya_agave/whole_genome/processed_bams/{sample_males}.GRCh38_minusYPARs.sorted.bam.bai",
			sample_males=config["samples_males"][wildcards.sample_males])
	output:
		"/scratch/amtarave/Kenya_agave/whole_genome/processed_bams/{sample_males}.GRCh38_minusYPARs.sorted.merged.bam"
	threads: 4
	params:
		sambamba = sambamba_path,
		samtools = samtools_path,
		threads = 4
	priority: 80
	shell:
		"{params.sambamba} merge -t {params.threads} {output} {input.bams}"


rule merge_bams_females:
	input:
		bams = lambda wildcards: expand(
			"/scratch/amtarave/Kenya_agave/whole_genome/processed_bams/{sample_females}.GRCh38_Ymasked.sorted.bam",
			sample_females=config["samples_females"][wildcards.sample_females]),
		bais = lambda wildcards: expand(
			"/scratch/amtarave/Kenya_agave/whole_genome/processed_bams/{sample_females}.GRCh38_Ymasked.sorted.bam.bai",
			sample_females=config["samples_females"][wildcards.sample_females])
	output:
		"/scratch/amtarave/Kenya_agave/whole_genome/processed_bams/{sample_females}.GRCh38_Ymasked.sorted.merged.bam"
	threads: 4
	params:
		sambamba = sambamba_path,
		threads = 4
	priority: 75
	shell:
		"{params.sambamba} merge -t {params.threads} {output} {input.bams}"



rule index_merged_bam_males:
	input:
		"/scratch/amtarave/Kenya_agave/whole_genome/processed_bams/{sample_males}.GRCh38_minusYPARs.sorted.merged.bam"
	output:
		"/scratch/amtarave/Kenya_agave/whole_genome/processed_bams/{sample_males}.GRCh38_minusYPARs.sorted.merged.bam.bai"
	params:
		samtools = samtools_path
	priority: 70
	shell:
		"{params.samtools} index {input}"


rule index_merged_bam_females:
	input:
		"/scratch/amtarave/Kenya_agave/whole_genome/processed_bams/{sample_females}.GRCh38_Ymasked.sorted.merged.bam"
	output:
		"/scratch/amtarave/Kenya_agave/whole_genome/processed_bams/{sample_females}.GRCh38_Ymasked.sorted.merged.bam.bai"
	params:
		samtools = samtools_path
	priority: 65
	shell:
		"{params.samtools} index {input}"


rule bam_stats:
	input:
		bam = "/scratch/amtarave/Kenya_agave/whole_genome/processed_bams/{sample}.{genome}.sorted.merged.bam",
		bai = "/scratch/amtarave/Kenya_agave/whole_genome/processed_bams/{sample}.{genome}.sorted.merged.bam.bai"
	output:
		"/scratch/amtarave/Kenya_agave/whole_genome/stats/{sample}.{genome}.sorted.bam.stats"
	params:
		samtools = samtools_path
	priority: 60
	shell:
		"{params.samtools} stats {input.bam} | grep ^SN | cut -f 2- > {output}"


rule picard_mkdups:
	input:
		bam = "/scratch/amtarave/Kenya_agave/whole_genome/processed_bams/{sample}.{genome}.sorted.merged.bam",
		bai = "/scratch/amtarave/Kenya_agave/whole_genome/processed_bams/{sample}.{genome}.sorted.merged.bam.bai"
	output:
		bam = "/scratch/amtarave/Kenya_agave/whole_genome/processed_bams/{sample}.{genome}.sorted.merged.mkdup.bam",
		metrics = "/scratch/amtarave/Kenya_agave/whole_genome/stats/{sample}.{genome}.picard_mkdup_metrics.txt"
	threads: 4
	params:
		picard = picard_path
	priority: 55
	shell:
		"{params.picard} -Xmx14g MarkDuplicates I={input.bam} O={output.bam} "
		"M={output.metrics}"


rule index_mkdup_bam:
	input:
		"/scratch/amtarave/Kenya_agave/whole_genome/processed_bams/{sample}.{genome}.sorted.merged.mkdup.bam"
	output:
		"/scratch/amtarave/Kenya_agave/whole_genome/processed_bams/{sample}.{genome}.sorted.merged.mkdup.bam.bai"
	params:
		samtools = samtools_path
	priority: 50
	shell:
		"{params.samtools} index {input}"


rule mkdup_bam_stats:
	input:
		bam = "/scratch/amtarave/Kenya_agave/whole_genome/processed_bams/{sample}.{genome}.sorted.merged.mkdup.bam",
		bai = "/scratch/amtarave/Kenya_agave/whole_genome/processed_bams/{sample}.{genome}.sorted.merged.mkdup.bam.bai"
	output:
		"/scratch/amtarave/Kenya_agave/whole_genome/stats/{sample}.{genome}.sorted.mkdup.bam.stats"
	params:
		samtools = samtools_path
	priority: 45
	shell:
		"{params.samtools} stats {input.bam} | grep ^SN | cut -f 2- > {output}"


# This has to be done on a per chromosome basis. 
# (Maybe it doesn't have to and I can just call that file and only specify -L in the next 
# rule? Worth trying)...Just take out -L option here in this rule
rule gatk_gvcf:
	input:
		ref = config["Ref_GRCh38"],
		bam = "/scratch/amtarave/Kenya_agave/whole_genome/processed_bams/{sample_w_genome}.sorted.merged.mkdup.bam",
		bai = "/scratch/amtarave/Kenya_agave/whole_genome/processed_bams/{sample_w_genome}.sorted.merged.mkdup.bam.bai"
	output:
		"/scratch/amtarave/Kenya_agave/whole_genome/gvcfs/{chrm}/{chrm}.{sample_w_genome}.merged.g.vcf.gz"
	params:
		gatk = gatk_path, # this is with the new version of gatk
		chrm_n = "{chrm}"
	threads: 4
	priority: 40
	shell:
		"java -Xmx15g -jar {params.gatk} "
		"HaplotypeCaller -R {input.ref} -I {input.bam} -L {params.chrm_n} "
		"--emit-ref-confidence GVCF --output {output}"
'''
# This rule is not working properly. I need to figure out a way for it to do one chromosome
# at a time, not mix the chromosomes like it is doing now
rule gatk_GenomicsDBImport:
	input:
		gvcf = expand("/scratch/amtarave/Kenya_agave/whole_genome/gvcfs/{{chrm}}/{{chrm}}.{sample_w_genome}.merged.g.vcf.gz", 
				sample_w_genome=config["samples_list_pilot_with_ref_info"])
	output:
		"gendb://my_database_{chrm}"
	threads: 4
	priority: 35
	params:
		#v_gvcf = expand("-V /scratch/amtarave/Kenya_agave/whole_genome/gvcfs/{{chrm}}/{{chrm}}.{sample_w_genome}.merged.g.vcf.gz", sample_w_genome=config["samples_list_pilot_with_ref_info"]),
		gatk = gatk_path,
		interval = "{chrm}",
		variant = "-V"
	shell:
		"java -Xmx15g -jar {params.gatk} "
		"GenomicsDBImport "
		"{params.variant} {input.gvcf}"
		#"{params.v_gvcf}"
		"--genomicsdb-workspace-path my_database_{params.interval} "
		"--intervals {params.interval} "
		'''

'''rule gatk_GenomicsDBImport:
	input:
		gvcf = expand("/scratch/amtarave/Kenya_agave/whole_genome/gvcfs/{sample}.{genome}.merged.g.vcf.gz".split(), zip,
			sample=config["samples_list_ordered_pilot"], genome=config["sex_specific_ref_list_ordered_pilot"])
	output:
		"gendb://my_database_{chrm}"
	threads: 4
	priority: 30
	params:
		gvcfs =expand("--variant /scratch/amtarave/Kenya_agave/whole_genome/gvcfs/{sample}.{genome}.merged.g.vcf.gz".split(), zip,
			sample=config["samples_list_ordered_pilot"], genome=config["sex_specific_ref_list_ordered_pilot"]),
		gatk = gatk_path,
		interval = "{chrm}"
	shell:
		"java -Xmx15g -jar {params.gatk} "
		"GenomicsDBImport {params.gvcfs} "
		"--genomicsdb-workspace-path my_database_{params.interval} "
		"--intervals {params.interval} "
'''
# used v4 of GAT for this
rule gatk_gvcf:
	input:
		ref = config["Ref_GRCh38"],
		bam = "/scratch/amtarave/Kenya_agave/whole_genome/processed_bams/{sample}.{genome}.sorted.merged.mkdup.bam",
		bai = "/scratch/amtarave/Kenya_agave/whole_genome/processed_bams/{sample}.{genome}.sorted.merged.mkdup.bam.bai"
	output:
		"/scratch/amtarave/Kenya_agave/whole_genome/gvcfs/{sample}.{genome}.merged.g.vcf.gz"
	params:
		gatk = gatk_path
	threads: 4
	priority: 40
	shell:
		#"gatk "
		"java -Xmx15g -jar {params.gatk} "
		"HaplotypeCaller -R {input.ref} -I {input.bam} "
		"--emit-ref-confidence GVCF --output {output}"



'''
rule gatk_joint_genotype_SNPs_new:
	input:
		db = "gendb:///scratch/amtarave/Kenya_agave/whole_genome/genomicsDBImport/my_database",
		ref = config["Ref_GRCh38"]
	output:
		"/scratch/amtarave/Kenya_agave/whole_genome/vcfs/pilot_samples.WGS.raw.vcf"
	threads: 4
	params:
		gatk = gatk_path
	priority: 25
	shell:
		"java -Xmx15g -jar {params.gatk} "
		"GenotypeGVCFs -V gendb:///scratch/amtarave/Kenya_agave/whole_genome/genomicsDBImport/my_database "
		"-G StandardAnnotation -newQual "
		"-R {input.ref} "
		"--output {output}"
'''



'''rule gatk_joint_genotype:
	input:
		gvcf = expand("/scratch/amtarave/Kenya_agave/whole_genome/gvcfs/{sample}.{genome}.merged.g.vcf.gz".split(), zip,
			sample=config["samples_list_ordered_pilot"], genome=config["sex_specific_ref_list_ordered_pilot"]),
		ref = config["Ref_GRCh38"]
	output:
		"/scratch/amtarave/Kenya_agave/whole_genome/vcfs/pilot_samples.WGS.raw.allsites.vcf"
	threads: 4
	params:
		gvcfs =expand("--variant /scratch/amtarave/Kenya_agave/whole_genome/gvcfs/{sample}.{genome}.merged.g.vcf.gz".split(), zip,
			sample=config["samples_list_ordered_pilot"], genome=config["sex_specific_ref_list_ordered_pilot"]),
		gatk = gatk_path
	priority: 35
	shell:
		"java -Xmx15g -jar {params.gatk} "
		"-T GenotypeGVCFs -R {input.ref} {params.gvcfs} "
		"--includeNonVariantSites -o {output}"
'''


rule gatk_joint_genotype_SNPs_old:
	input:
		gvcf = expand("/scratch/amtarave/Kenya_agave/whole_genome/gvcfs/{sample}.{genome}.merged.g.vcf.gz".split(), zip,
			sample=config["samples_list_ordered_pilot"], genome=config["sex_specific_ref_list_ordered_pilot"]),
		ref = config["Ref_GRCh38"]
	output:
		"/scratch/amtarave/Kenya_agave/whole_genome/vcfs/pilot_samples.WGS.raw.vcf"
	threads: 4
	params:
		gvcfs =expand("--variant /scratch/amtarave/Kenya_agave/whole_genome/gvcfs/{sample}.{genome}.merged.g.vcf.gz".split(), zip,
			sample=config["samples_list_ordered_pilot"], genome=config["sex_specific_ref_list_ordered_pilot"]),
		gatk = gatk_path_old
	priority: 35
	shell:
		"java -Xmx15g -jar {params.gatk} "
		"-T GenotypeGVCFs -R {input.ref} {params.gvcfs} "
		"-o {output}"
'''
rule select_SNPs:
	input:
		vcf_all = "/scratch/amtarave/Kenya_agave/whole_genome/vcfs/pilot_samples.WGS.raw.allsites.vcf",
		ref = config["Ref_GRCh38"]
	output:
		"/scratch/amtarave/Kenya_agave/whole_genome/vcfs/pilot_samples.WGS.raw.SNPs.vcf"
	params:
		gatk = gatk_path_old
	priority: 30
	shell:
		"java -Xmx15g -jar {params.gatk} -T SelectVariants -R {input.ref} "
		"-V {input.vcf_all} "
		"--selectTypeToExclude INDEL --selectTypeToExclude MIXED --selectTypeToExclude MNP --selectTypeToExclude SYMBOLIC "
		"--selectTypeToInclude SNP "
		"-o {output}"
'''
